#!/usr/bin/env node
const fs = require('fs');
const path = require('path');
const readline = require('readline');

if(process.argv.length < 4){
	console.log("missing argument!");
	return;
}else{
	let [oldName, newName] = process.argv.map(arg=> arg.toLowerCase()).slice(2);
	
	if(newName.indexOf("component") != -1){			
		newName = newName.substring(0, newName.indexOf("component"));
	}
	
	if(oldName.indexOf("component") != -1){			
		oldName = oldName.substring(0, oldName.indexOf("component"));
	}
	
	moveFiles(oldName, newName);
	replaceReferences(oldName, newName);
}

function moveFiles(oldName, newName){
	let componentPath = "src/app/" + oldName + "/"  + oldName + ".component";
	let newComponentPath = "src/app/" + newName + "/"  + newName + ".component";
	fs.mkdirSync("src/app/" +newName, { recursive: true })

	let extensions = [".html", ".css", ".ts", ".spec.ts"];
	extensions.map(extension => {
		fs.rename(componentPath + extension, newComponentPath + extension, function(err) {
			if ( err ) console.log('ERROR while renaming: ' + err);
		});
		console.log('\x1b[32m%s\x1b[0m',"\t created : " + newComponentPath + extension);
	});		
}

function replaceReferences(oldName, newName){
	let dir = '.';
	let files = getFiles(dir, [], oldName);
	
	files.map(file => {
		fs.readFile(file, 'utf8', function (err,data) {
		if (err) {
			return console.log(err);
		}
		var result = data
			.replace(new RegExp(getComponentName(oldName), 'g'), getComponentName(newName))
			.replace(new RegExp("/" + oldName, 'g'), "/" +newName );
		

		fs.writeFile(file, result, 'utf8', function (err) {
			if (err) 
				return console.log(err);
			});
		});		
		console.log("\x1b[36m%s\x1b[0m", "\t modifiled : " + file);		
	});
}

function getComponentName(name){
	return name[0].toUpperCase() + name.slice(1).toLowerCase() + "Component";
}

function getFiles(dir, filelist, oldName) {
  var fs = fs || require('fs'),
      files = fs.readdirSync(dir);
  filelist = filelist || [];
  files.forEach(function(file) {
	let abspath = dir + '/' + file;
    if (fs.statSync(abspath).isDirectory()) {
       if(abspath.indexOf('node_modules')== -1){
		   getFiles(abspath , filelist, oldName);
	   }
    }
    else if(abspath.endsWith(".ts") && containsKey(abspath, oldName)) {
      filelist.push(abspath);
    }
  });
  return filelist;
};

function containsKey(file, oldName){
	let data = fs.readFileSync(file, 'utf8');
	return data.indexOf(oldName) != -1;
}

